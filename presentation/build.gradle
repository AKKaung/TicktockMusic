apply plugin: 'com.android.application'
//apply plugin: 'me.tatarka.retrolambda'

android {
    def globalConfiguration = rootProject.extensions.getByName("ext")

    compileSdkVersion globalConfiguration["androidCompileSdkVersion"]
    buildToolsVersion globalConfiguration["androidBuildToolsVersion"]

    defaultConfig {
        minSdkVersion globalConfiguration["androidMinSdkVersion"]
        targetSdkVersion globalConfiguration["androidTargetSdkVersion"]
        applicationId globalConfiguration["androidApplicationId"]
        versionCode globalConfiguration["androidVersionCode"]
        versionName globalConfiguration["androidVersionName"]
        testInstrumentationRunner globalConfiguration["testInstrumentationRunner"]
        testApplicationId globalConfiguration["testApplicationId"]
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }

    sourceSets {
        main {
            manifest.srcFile 'src/main/AndroidManifest.xml'
            java.srcDirs = ['src/main/java', '.apt_generated']
            aidl.srcDirs = ['src/main/aidl', '.apt_generated']
            assets.srcDirs = ['src/main/assets']
            res.srcDirs =
                    [
                            'src/main/res/layouts/main',
                            'src/main/res/layouts/music',
                            'src/main/res/'
                    ]
        }
    }

    buildTypes {
        debug {
            versionNameSuffix "-debug"
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
        }
        release {
            minifyEnabled false
            zipAlignEnabled true
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        disable 'CheckResult'
    }
}

dependencies {
    def supportDependencies = rootProject.ext.supportDependencies
    def presentationDependencies = rootProject.ext.presentationDependencies
    def testDependencies = rootProject.ext.testDependencies
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    androidTestImplementation testDependencies.espresso, {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    implementation supportDependencies.appcompatV7
    implementation supportDependencies.constraint
    implementation presentationDependencies.rxAndroid
    implementation presentationDependencies.dagger
    annotationProcessor presentationDependencies.daggerCompiler
    implementation presentationDependencies.butterKnife
    implementation presentationDependencies.rxPermission
    annotationProcessor presentationDependencies.butterKnifeCompiler
    testImplementation testDependencies.junit
    implementation project(':data')
    implementation project(':libraries')
}

configurations.all {
    def supportDependencies = rootProject.ext.supportDependencies
//    resolutionStrategy.force 'com.android.support:support-v4:25.1.0'
//    resolutionStrategy.force 'com.android.support:appcompat-v7:25.1.0'
    resolutionStrategy.force supportDependencies.appcompatV7
    resolutionStrategy.force supportDependencies.supportV4
}
